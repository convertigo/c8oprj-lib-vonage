accessibility: Private
comment: Used for Video APIs
↓computeJWT [steps.SimpleStep-1604131506725]: 
  expression: |
    'signFunctions = {
    	HmacSHA256: function(data, key) // String data, byte[] key ==> byte[]
      	{
      		var signatureMethod = new java.lang.String("HmacSHA256");
      		var mac = javax.crypto.Mac.getInstance(signatureMethod);
      		mac.init(new javax.crypto.spec.SecretKeySpec(key, signatureMethod));
      		var signed = mac.doFinal(new java.lang.String(data).getBytes("UTF8"));
      		return signed;
      	}
    }
    
    base64Util = {
    	/*
    	 * JavaScript base64 / base64url encoder and decoder
    	 */
    	b64c : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",   // base64 dictionary
    	b64u : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",  // base64url dictionary
    	b64pad : ''='',
    
    	/* base64_encode_data
    	 * Internal helper to encode data to base64 using specified dictionary.
    	 */
    	base64_encode_data: function (data, len, b64x) {
    	    var dst = ""
    	    var i
    	
    	    for (i = 0; i <= len - 3; i += 3)
    	    {
    	        dst += b64x.charAt(data.charCodeAt(i) >>> 2)
    	        dst += b64x.charAt(((data.charCodeAt(i) & 3) << 4) | (data.charCodeAt(i+1) >>> 4))
    	        dst += b64x.charAt(((data.charCodeAt(i+1) & 15) << 2) | (data.charCodeAt(i+2) >>> 6))
    	        dst += b64x.charAt(data.charCodeAt(i+2) & 63)
    	    }
    	
    	    if (len % 3 == 2)
    	    {
    	        dst += b64x.charAt(data.charCodeAt(i) >>> 2)
    	        dst += b64x.charAt(((data.charCodeAt(i) & 3) << 4) | (data.charCodeAt(i+1) >>> 4))
    	        dst += b64x.charAt(((data.charCodeAt(i+1) & 15) << 2))
    	        dst += this.b64pad
    	    }
    	    else if (len % 3 == 1)
    	    {
    	        dst += b64x.charAt(data.charCodeAt(i) >>> 2)
    	        dst += b64x.charAt(((data.charCodeAt(i) & 3) << 4))
    	        dst += this.b64pad
    	        dst += this.b64pad
    	    }
    	
    	    return dst
    	},
    	
    	/* base64_encode
    	 * Encode a JavaScript string to base64.
    	 * Specified string is first converted from JavaScript UCS-2 to UTF-8.
    	 */
    	base64_encode : function (str) {
    	    var utf8str = unescape(encodeURIComponent(str))
    	    return this.base64_encode_data(utf8str, utf8str.length, this.b64c)
    	},
    	
    	/* base64url_encode
    	 * Encode a JavaScript string to base64url.
    	 * Specified string is first converted from JavaScript UCS-2 to UTF-8.
    	 */
    	base64url_encode: function (str) {
    	    var utf8str = unescape(encodeURIComponent(str))
    	    return this.base64_encode_data(utf8str, utf8str.length, this.b64u).split("=")[0]
    	},
    	
    	/* base64_charIndex
    	 * Internal helper to translate a base64 character to its integer index.
    	 */
    	base64_charIndex:  function (c) {
    	    if (c == "+") return 62
    	    if (c == "/") return 63
    	    return this.b64u.indexOf(c)
    	},
    	
    	/* base64_decode
    	 * Decode a base64 or base64url string to a JavaScript string.
    	 * Input is assumed to be a base64/base64url encoded UTF-8 string.
    	 * Returned result is a JavaScript (UCS-2) string.
    	 */
    	base64_decode: function (data) {
    	    var dst = ""
    	    var i, a, b, c, d, z
    	    
    	    for (i = 0; i < data.length - 3; i += 4) {
    	        a = base64_charIndex(data.charAt(i+0))
    	        b = base64_charIndex(data.charAt(i+1))
    	        c = base64_charIndex(data.charAt(i+2))
    	        d = base64_charIndex(data.charAt(i+3))
    	
    	        dst += String.fromCharCode((a << 2) | (b >>> 4))
    	        if (data.charAt(i+2) != b64pad)
    	            dst += String.fromCharCode(((b << 4) & 0xF0) | ((c >>> 2) & 0x0F))
    	        if (data.charAt(i+3) != b64pad)
    	            dst += String.fromCharCode(((c << 6) & 0xC0) | d)
    	    }
    	
    	    dst = decodeURIComponent(escape(dst))
    	    return dst
    	},
    	
    	/* base64url_sniff
    	 * Check whether specified base64 string contains base64url specific characters.
    	 * Return true if specified string is base64url encoded, false otherwise.
    	 */
    	base64url_sniff: function (base64) {
    	    if (base64.indexOf("-") >= 0) return true
    	    if (base64.indexOf("_") >= 0) return true
    	    return false
    	},
    	
    	hexToBase64: function (hexStr) {
    		base64 = "";
    		for(i = 0; i < hexStr.length; i++) {
    		   base64 += !(i - 1 & 1) ? String.fromCharCode(parseInt(hexStr.substring(i - 1, i + 1), 16)) : "";
    		}
    		return base64;
    	},	
    	
      	/*
    		Utility Routine to dump in the logs an array of bytes in HEX format.
    	*/
    	logToHexString: function(label, data)
    	{
    		log.debug("======== " + label + ":" +
    				javax.xml.bind.DatatypeConverter.printHexBinary(data)
    		);
    	},
    
    }
    
    /*
     * Build JWT Token 
     */
    
    /*
    JWTHeader = {
    	alg: "HS256",
    	typ: "JWT"
    } 
    
    JWTData = {
        "iss": apiKey,
        "ist": project,
        "iat": new Date().getTime(),
        "exp": new Date().getTime() + 2000,
        "jti": (java.util.UUID.randomUUID().toString() + "") 
    }
    
    JWT = base64Util.base64url_encode(JSON.stringify(JWTHeader)) + "." + 
    	  base64Util.base64url_encode(JSON.stringify(JWTData));
    
    baSignature  = signFunctions.HmacSHA256(JWT, new java.lang.String(apiSecret).getBytes("UTF8"));
    hsSignature  = javax.xml.bind.DatatypeConverter.printHexBinary(baSignature);
    log.debug("##### " + hsSignature);
    
    sign 				= base64Util.hexToBase64(hsSignature);
    log.debug("##### " + hsSignature);
    JWT 				= JWT + "." + sign;
    
    */
    
    //alg = use(com.auth0.jwt.algorithms.Algorithm);
    alg = com.auth0.jwt.algorithms.Algorithm.HMAC256(apiSecret);
    JWT = new com.auth0.jwt.JWT.create().
    	withIssuer   (apiKey).
    	withIssuedAt (new Date().getTime() * 1).
    	withExpiresAt((new Date().getTime() + 2000) * 1).
    	withJWTId    ((java.util.UUID.randomUUID().toString() + "")).
    	withClaim	 ("ist", project).
    	sign(alg);
    
    
    
    
    '
↓jElement [steps.ElementStep-1604132608080]: 
  expression: JWT
  nodeName: JWT
↓apiKey [variables.RequestableVariable-1604131260068]: 
  value: ${lib_Vonage.video.apiKey}
↓apiSecret [variables.RequestableVariable-1604131311285]: 
  value: 
    - ↑ciphered: true
    - ↑traceable: false
    - →→: x20f216936e4bc1842bcfc6f43c208571923c2950e45f8ca3d5673843bdfd0e053fabd878786233f5613b9778cdf0af0f
  visibility: '-1'
↓project [variables.RequestableVariable-1604131945822]: 
  value: ${lib_Vonage.video.project}